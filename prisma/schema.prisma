// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum AppName {
  X
  LinkedIn
}

enum SubscriptionTier {
  FREE
  PRO
  TEAM
  ENTERPRISE
}

enum BillingInterval {
  MONTHLY
  ANNUAL
}

model User {
  id                     Int      @id @default(autoincrement())
  username               String   @unique
  email                  String   @unique
  twitterId              String?  @unique
  linkedinId             String?  @unique
  profile_url            String?
  app_name               AppName  @default(X)
  website                String?
  github_username        String?
  twitter_username       String?
  linkedin_username      String?
  address                String?
  isPrivate              Boolean  @default(false)
  editors_used_public    Boolean  @default(true)
  categories_used_public Boolean  @default(true)
  os_used_public         Boolean  @default(true)
  logged_time_public     Boolean  @default(true)
  timezone               String?
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt

  // New fields for monetization
  subscriptionTier  SubscriptionTier @default(FREE)
  subscriptionStart DateTime?
  subscriptionEnd   DateTime?
  billingInterval   BillingInterval?
  stripeCustomerId  String?          @unique
  teamId            Int?
  isTeamAdmin       Boolean          @default(false)

  // Relations
  projects       Project[]
  Heartbeats     Heartbeat[]
  codingSessions CodingSession[]
  dailySummaries DailySummary[]
  team           Team?           @relation(fields: [teamId], references: [id])
  invoices       Invoice[]
  apiKeys        ApiKey[]
  tokens         Token[]
  usageTracking  UsageTracking[]
  connectionTracking ConnectionTracking[]
  aiUsageTracking AiUsageTracking[]
  preferences    UserPreferences?

  @@index([twitterId])
  @@index([linkedinId])
  @@index([subscriptionTier])
}

model Team {
  id                Int              @id @default(autoincrement())
  name              String
  subscriptionTier  SubscriptionTier @default(TEAM)
  subscriptionStart DateTime?
  subscriptionEnd   DateTime?
  billingInterval   BillingInterval?
  stripeCustomerId  String?          @unique
  maxMembers        Int              @default(5)
  created_at        DateTime         @default(now())
  updated_at        DateTime         @updatedAt
  members           User[]
  invoices          Invoice[]

  @@index([subscriptionTier])
}

model Invoice {
  id         Int       @id @default(autoincrement())
  userId     Int?
  teamId     Int?
  amount     Decimal   @db.Decimal(10, 2)
  currency   String    @default("USD")
  status     String // paid, pending, failed
  stripeId   String?   @unique
  created_at DateTime  @default(now())
  paid_at    DateTime?

  user User? @relation(fields: [userId], references: [id])
  team Team? @relation(fields: [teamId], references: [id])

  @@index([userId])
  @@index([teamId])
}

model ApiKey {
  id         Int       @id @default(autoincrement())
  userId     Int
  name       String
  key        String    @unique
  lastUsed   DateTime?
  created_at DateTime  @default(now())
  expires_at DateTime?
  isActive   Boolean   @default(true)

  user User @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([key])
}

model Project {
  id                                Int      @id @default(autoincrement())
  user                              User     @relation(fields: [userId], references: [id])
  userId                            Int
  name                              String
  repository                        String?
  badge                             String
  color                             String
  clients                           String[]
  has_public_url                    Boolean
  human_readable_last_Heartbeat_at  String
  last_Heartbeat_at                 String
  human_readable_first_Heartbeat_at String
  first_Heartbeat_at                String
  url                               String
  urlencoded_name                   String
  created_at                        DateTime @default(now())
  updated_at                        DateTime @updatedAt

  @@unique([userId, name]) // Project names should be unique per user
}

model Heartbeat {
  id                 Int      @id @default(autoincrement())
  user               User     @relation(fields: [userId], references: [id])
  userId             Int
  project            String?
  language           String?
  time               Float
  project_root_count Int
  entity             String // File path or URL
  type               String   @default("file") // file, domain, app
  category           String   @default("coding") // coding, building, indexing, debugging
  is_write           Boolean  @default(false)
  branch             String? // Git branch
  dependencies       String?
  lines              Int // Total lines in file
  line_additions     Int?
  line_deletions     Int?
  lineno             Int? // Current line number
  cursorpos          Int? // Cursor position
  machine_name       String? // Machine identifier
  created_at         DateTime @default(now())
  updated_at         DateTime @updatedAt

  @@index([userId, created_at])
}

model CodingSession {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  projectId Int? // Optional project reference
  startTime DateTime // ISO start time of session
  endTime   DateTime // ISO end time of session
  duration  Int // Duration in seconds (WakaTime uses float but we round here)

  branch    String? // Optional: e.g., "main", "dev"
  languages String[] // Optional: e.g., "JavaScript"

  totalLines Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId, startTime]) // For efficient querying per user/date
}

model DailySummary {
  id            Int      @id @default(autoincrement())
  user          User     @relation(fields: [userId], references: [id])
  userId        Int
  projectId     Int?
  summaryDate   DateTime
  totalDuration Decimal  @db.Decimal(10, 2)
  totalEvents   Int

  @@unique([userId, projectId, summaryDate]) // Avoid duplicate summaries
}

model Token {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model UsageTracking {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  limitType String
  date      DateTime
  count     Int      @default(0)
  duration  Int      @default(0)  // Duration in seconds
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId, limitType, date])
}

model ConnectionTracking {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  date      DateTime
  count     Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId, date])
}

model AiUsageTracking {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  month     String
  minutes   Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId, month])
}

model UserPreferences {
  id            Int      @id @default(autoincrement())
  userId        Int      @unique
  user          User     @relation(fields: [userId], references: [id])
  dashboard     Json?
  notifications Json?
  appearance    Json?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}
