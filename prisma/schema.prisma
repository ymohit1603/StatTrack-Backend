// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum AppName {
  X
  LinkedIn
}

enum SubscriptionTier {
  FREE
  PRO
  TEAM
  ENTERPRISE
}

enum BillingInterval {
  MONTHLY
  ANNUAL
}

model User {
  id          Int      @id @default(autoincrement())
  username    String   @unique
  email       String   @unique
  twitterId   String?  @unique
  linkedinId  String?  @unique
  profile_url String?
  app_name    AppName  @default(X)
  isPrivate   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // New fields for monetization
  subscriptionTier  SubscriptionTier @default(FREE)
  subscriptionStart DateTime?
  subscriptionEnd   DateTime?
  billingInterval   BillingInterval?
  stripeCustomerId  String?          @unique
  teamId            Int?
  isTeamAdmin       Boolean          @default(false)

  // Relations
  projects       Project[]
  heartbeats     Heartbeat[]
  codingSessions CodingSession[]
  dailySummaries DailySummary[]
  team           Team?           @relation(fields: [teamId], references: [id])
  invoices       Invoice[]
  apiKeys        ApiKey[]

  @@index([twitterId])
  @@index([linkedinId])
  @@index([subscriptionTier])
}

model Team {
  id                Int              @id @default(autoincrement())
  name              String
  subscriptionTier  SubscriptionTier @default(TEAM)
  subscriptionStart DateTime?
  subscriptionEnd   DateTime?
  billingInterval   BillingInterval?
  stripeCustomerId  String?          @unique
  maxMembers        Int              @default(5)
  created_at        DateTime         @default(now())
  updated_at        DateTime         @updatedAt
  members           User[]
  invoices          Invoice[]

  @@index([subscriptionTier])
}

model Invoice {
  id         Int       @id @default(autoincrement())
  userId     Int?
  teamId     Int?
  amount     Decimal   @db.Decimal(10, 2)
  currency   String    @default("USD")
  status     String // paid, pending, failed
  stripeId   String?   @unique
  created_at DateTime  @default(now())
  paid_at    DateTime?

  user User? @relation(fields: [userId], references: [id])
  team Team? @relation(fields: [teamId], references: [id])

  @@index([userId])
  @@index([teamId])
}

model ApiKey {
  id         Int       @id @default(autoincrement())
  userId     Int
  name       String
  key        String    @unique
  lastUsed   DateTime?
  created_at DateTime  @default(now())
  expires_at DateTime?
  isActive   Boolean   @default(true)

  user User @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([key])
}

model Project {
  id             Int             @id @default(autoincrement())
  user           User            @relation(fields: [userId], references: [id])
  userId         Int
  name           String
  description    String?
  repositoryUrl  String?
  branch         String? // Added branch field
  created_at     DateTime        @default(now())
  updated_at     DateTime        @updatedAt
  heartbeats     Heartbeat[]
  codingSessions CodingSession[]
  dailySummaries DailySummary[]

  @@unique([userId, name]) // Project names should be unique per user
}

model Editor {
  id           Int         @id @default(autoincrement())
  name         String      @unique // Editor name should be unique
  version      String?
  otherDetails Json?
  heartbeats   Heartbeat[]
}

model Language {
  id           Int         @id @default(autoincrement())
  name         String      @unique // Language name should be unique
  version      String?
  otherDetails Json?
  heartbeats   Heartbeat[]
}

model Heartbeat {
  id           Int       @id @default(autoincrement())
  user         User      @relation(fields: [userId], references: [id])
  userId       Int
  project      Project?  @relation(fields: [projectId], references: [id])
  projectId    Int?
  editor       Editor?   @relation(fields: [editorId], references: [id])
  editorId     Int?
  language     Language? @relation(fields: [languageId], references: [id])
  languageId   Int?
  timestamp    DateTime
  duration     Decimal   @db.Decimal(10, 2)
  entity       String // File path or URL
  type         String    @default("file") // file, domain, app
  category     String    @default("coding") // coding, building, indexing, debugging
  is_write     Boolean   @default(false)
  branch       String? // Git branch
  lines        Int? // Total lines in file
  lineno       Int? // Current line number
  cursorpos    Int? // Cursor position
  machine_name String? // Machine identifier
  created_at   DateTime  @default(now())
  updated_at   DateTime  @updatedAt

  @@index([userId, timestamp])
}

model CodingSession {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  project   Project? @relation(fields: [projectId], references: [id])
  projectId Int?
  startTime DateTime
  endTime   DateTime
  duration  Int // In minutes

  @@index([userId, startTime]) // Optimize queries for user sessions
}

model DailySummary {
  id            Int      @id @default(autoincrement())
  user          User     @relation(fields: [userId], references: [id])
  userId        Int
  project       Project? @relation(fields: [projectId], references: [id])
  projectId     Int?
  summaryDate   DateTime
  totalDuration Decimal  @db.Decimal(10, 2)
  totalEvents   Int

  @@unique([userId, projectId, summaryDate]) // Avoid duplicate summaries
}
